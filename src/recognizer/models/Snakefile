configfile: "./config.yaml"

all_cancers = ' '.join(config['cancers'])
joined_cancers = '_'.join(config['cancers'])
amount_of_summed_embeddings = config['amount_of_summed_embeddings']
multi_cancer_max_walk = config['multi_cancer_max_walk']
simple_cancer_max_walk = config['simple_cancer_max_walk']
max_run_iterations = config['run_iterations']
noise_ratios = config['noise_ratios']

rule all:
    input:
        expand(
            f"results/recognizer/aggregated_metrics/simple/{{amount}}/metrics.csv",
            amount=amount_of_summed_embeddings
            ),

        expand(
            f"results/recognizer/aggregated_metrics/{{cancers}}/{{amount}}/metrics.csv",
            amount=amount_of_summed_embeddings,
            cancers=joined_cancers
        )

rule run_simple_recognizer:
    input:
        expand(
            f"results/recognizer/summed_embeddings/simple/{{amount}}/{{noise}}/{{walk_distance}}_embeddings.h5",
            walk_distance=range(3, simple_cancer_max_walk + 1),
            amount=amount_of_summed_embeddings,
            noise=noise_ratios
        )
    output:
        expand(
           f"results/recognizer/simple/{{cancers}}/{{amount}}/{{noise}}/{{walk_distance}}_embeddings/run_{{iteration}}/metrics.csv",
            walk_distance=range(3, simple_cancer_max_walk + 1),
            iteration=range(max_run_iterations),
            amount=amount_of_summed_embeddings,
            noise=noise_ratios,
            cancers=joined_cancers
        ),
    run:
        # Set the values from config
        amount = amount_of_summed_embeddings

        # Python loop for control
        for walk_distance in range(3, simple_cancer_max_walk + 1):
            for noise in noise_ratios:
                print(f"Processing noise: {noise}")
                if max_run_iterations == 1:
                    # Run only once if max_run_iterations is 1
                    shell(f"python src/recognizer/models/2_01_simple_recognizer.py -w {walk_distance} -ri 0 -a {amount} -n {noise}")
                else:
                    # Run multiple times if max_run_iterations > 1
                    for iteration in range(max_run_iterations):
                        shell(f"python src/recognizer/models/2_01_simple_recognizer.py -w {walk_distance} -ri {iteration} -a {amount} -n {noise}")


rule run_simple_recognizer_combined:
    input:
        expand(
            f"results/recognizer/summed_embeddings/simple/{{amount}}/0.0/{{walk_distance}}_embeddings.h5",
            walk_distance=range(3, simple_cancer_max_walk + 1),
            amount=amount_of_summed_embeddings,
        )
    output:
        expand(
           f"results/recognizer/simple/{{amount}}/0.0/combined_embeddings/run_{{iteration}}/metrics.csv",
           iteration=range(0,max_run_iterations),
           amount=amount_of_summed_embeddings,
        )
    run:
        # Set the values from config
        amount = amount_of_summed_embeddings

        # Python loop for control
        if max_run_iterations == 1:
            # Run only once if run_iterations is 1
            shell(f"python3 src/recognizer/models/2_01_simple_recognizer.py -w -1 -ri 0 -a {amount} -n 0.0")
        else:
            # Run multiple times if run_iterations > 1
            for iteration in range(run_iterations):
                shell(f"python3 src/recognizer/models/2_01_simple_recognizer.py -w -1 -ri {iteration} -a {amount} -n 0.0")


rule aggregate_simple_recognizer_results:
    input:
        expand(
           f"results/recognizer/simple/{{amount}}/{{noise}}/{{walk_distance}}_embeddings/run_{{iteration}}/metrics.csv",
            walk_distance=range(3, simple_cancer_max_walk + 1),
            iteration=range(max_run_iterations),
            amount=amount_of_summed_embeddings,
            noise=noise_ratios
        ),
        expand(
           f"results/recognizer/simple/{{amount}}/0.0/combined_embeddings/run_{{run_iterations}}/metrics.csv",
            run_iterations=range(0, max_run_iterations),
            amount=amount_of_summed_embeddings
        ),
    output:
         expand(f"results/recognizer/aggregated_metrics/simple/{{amount}}/metrics.csv",
            amount=amount_of_summed_embeddings
         )

    run:
        amount = amount_of_summed_embeddings
        shell(f"python src/recognizer/models/3_01_aggregate_run_metrics.py -d results/recognizer/simple/{{amount_of_summed_embeddings}}")

rule run_multi_cancer_recognizer:
    input:
        expand(
            f"results/recognizer/summed_embeddings/multi/{{cancers}}/{{amount}}/{{noise}}/{{walk_distance}}_embeddings.h5",
            walk_distance=range(3, multi_cancer_max_walk + 1),
            amount=amount_of_summed_embeddings,
            noise=noise_ratios,
            cancers=joined_cancers
        )
    output:
        expand(
           f"results/recognizer/multi/{{cancers}}/{{amount}}/{{noise}}/{{walk_distance}}_embeddings/run_{{iteration}}/metrics.csv",
            walk_distance=range(3, multi_cancer_max_walk + 1),
            iteration=range(max_run_iterations),
            amount=amount_of_summed_embeddings,
            noise=noise_ratios,
            cancers=joined_cancers
        )

    run:
        # Set the values from config
        amount = amount_of_summed_embeddings
        cancers = all_cancers

        # Python loop for control
        for walk_distance in range(3, multi_cancer_max_walk + 1):
            for noise in noise_ratios:
                if max_run_iterations == 1:
                    # Run only once if max_run_iterations is 1
                    shell(f"python src/recognizer/models/2_03_multi_cancer_recognizer.py -w {walk_distance} -ri 0 -a {amount} -c {cancers} -n {noise}")
                else:
                    # Run multiple times if max_run_iterations > 1
                    for iteration in range(max_run_iterations):
                        shell(f"python src/recognizer/models/2_03_multi_cancer_recognizer.py -w {walk_distance} -ri {iteration} -a {amount} -c {cancers} -n {noise}")


rule run_multi_cancer_recognizer_combined:
    input:
        expand(
            f"results/recognizer/summed_embeddings/multi/{{cancers}}/{{amount}}/0.0/combined_embeddings.h5",
            walk_distance=range(3, multi_cancer_max_walk + 1),
            amount=amount_of_summed_embeddings,
            cancers=joined_cancers
        )
    output:
        expand(
           f"results/recognizer/multi/{{cancers}}/{{amount}}/0.0/combined_embeddings/run_{{iteration}}/metrics.csv",
           iteration=range(0,max_run_iterations),
           amount=amount_of_summed_embeddings,
           cancers=joined_cancers,
        )
    run:
        # Set the values from config
        amount = amount_of_summed_embeddings
        cancers = all_cancers

        # Python loop for control
        for walk_distance in range(3, multi_cancer_max_walk + 1):
            if max_run_iterations == 1:
                # Run only once if run_iterations is 1
                shell(f"python3 src/recognizer/models/2_03_multi_cancer_recognizer.py -w -1 -ri 0 -a {amount} -c {cancers} -n 0.0")
            else:
                # Run multiple times if run_iterations > 1
                for iteration in range(run_iterations):
                    shell(f"python3 src/recognizer/models/2_03_multi_cancer_recognizer.py -w -1 -ri {iteration} -a {amount} -c {cancers} -n 0.0")



rule aggregate_multi_recognizer_results:
    input:
        expand(
           f"results/recognizer/multi/{{cancers}}/{{amount}}/0.0/{{walk_distance}}_embeddings/run_{{iteration}}/metrics.csv",
           iteration=range(0,max_run_iterations),
           amount=amount_of_summed_embeddings,
           cancers=joined_cancers,
           walk_distance=range(3, multi_cancer_max_walk + 1)
        ),
        expand(
           f"results/recognizer/multi/{{cancers}}/{{amount}}/{{noise}}/{{walk_distance}}_embeddings/run_{{iteration}}/metrics.csv",
            walk_distance=range(3, multi_cancer_max_walk + 1),
            iteration=range(max_run_iterations),
            amount=amount_of_summed_embeddings,
            noise=noise_ratios,
            cancers=joined_cancers
        ),
        expand(
           f"results/recognizer/multi/{{cancers}}/{{amount}}/0.0/combined_embeddings/run_{{iteration}}/metrics.csv",
           iteration=range(0,max_run_iterations),
           amount=amount_of_summed_embeddings,
           cancers=joined_cancers,
        )
    output:
        expand(
            f"results/recognizer/aggregated_metrics/{{cancers}}/{{amount}}/metrics.csv",
            amount=amount_of_summed_embeddings,
            cancers=joined_cancers
        )

    run:
        amount = amount_of_summed_embeddings
        cancers = joined_cancers
        shell(f"python src/recognizer/models/3_01_aggregate_run_metrics.py -d results/recognizer/multi/{{cancers}}/{{amount}}")
