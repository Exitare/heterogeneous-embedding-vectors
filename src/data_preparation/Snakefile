# Snakefile

configfile: "./config.yaml"

all_cancers = config['cancers']
joined_cancers = '_'.join(config['cancers'])
lower_cancers = [c.lower() for c in all_cancers]
cancer_arg = ' '.join(all_cancers)  # for -c args

rule all:
    input:
        expand(
            f"results/embeddings/{{cancers}}.h5",
            cancers=joined_cancers
        ),
        expand(
            f"results/embeddings/{{cancers}}_classifier.h5",
            cancers=joined_cancers
        ),


rule download_rna_data:
    output:
        "data/rna/{cancer}/data.csv"
    params:
        credentials=lambda wildcards: config["credentials_file"]
    shell:
        """
        python ./src/data_preparation/0_01_download_rna_data.py \
            --cancer {wildcards.cancer} \
            --credentials {params.credentials} > {output}
        """

rule download_mutations_data:
    output:
        "data/mutations/mutations.csv"
    shell:
        "python ./src/data_preparation/0_05_download_mutations.py --credentials {config[credentials_file]} > {output}"


rule create_rna_embeddings:
    input:
        expand("data/rna/{cancer}/data.csv", cancer=all_cancers)
    output:
        expand("results/embeddings/rna/{joined}/{cancer}_embeddings.csv",
               joined=joined_cancers, cancer=lower_cancers)
    shell:
         "python ./src/data_preparation/0_04_create_rna_embeddings.py -c " + ' '.join(all_cancers)


rule create_mutation_embeddings:
    input:
        "data/mutations/mutations.csv"
    output:
        "results/embeddings/mutation_embeddings.csv"
    shell:
        "python ./src/data_preparation/0_13_create_mutation_embeddings.py -d data/mutations/mutations.csv > {output}"


rule download_case_manifest:
    output:
        "data/annotations/case_manifest.json"
    shell:
        "python ./src/data_preparation/0_03_download_case_manifest.py -d data/annotations/ > {output}"

rule download_annotations:
    input:
        "data/annotations/case_manifest.json"
    output:
        "data/annotations/download_complete.txt"
    shell:
        "python ./src/data_preparation/0_02_download_annotations.py -d data/annotations/ > {output}"

rule extract_text_from_pdf_annotations_1:
    input:
        "data/annotations/case_manifest.json",
        "data/annotations/download_complete.txt"
    output:
        "data/annotations/extracted_text_success.txt"
    shell:
        "./src/data_preparation/0_07_extract_text_from_pdf.sh > {output}"


rule combine_annotations_1:
    input:
        "data/annotations/case_manifest.json",
        "data/annotations/download_complete.txt"
    output:
        f"data/annotations/{joined_cancers}/embeddings.csv"
    shell:
        f"python ./src/data_preparation/0_08_combine_annotations.py -c {cancer_arg} > {{output}}"

rule find_empty_txts:
    input:
        f"data/annotations/{joined_cancers}/embeddings.csv"
    output:
        "data/annotations/empty_txts.csv"
    shell:
        f"python ./src/data_preparation/0_09_find_empty_txts.py -c {cancer_arg} > {{output}}"

rule tesseract_conversion:
    input:
        "data/annotations/empty_txts.csv"
    output:
        f"data/annotations/{joined_cancers}/tesseract_conversion_success.txt"
    shell:
        f"./src/data_preparation/0_10_tesseract_conversion.sh '{cancer_arg}' > {{output}}"

rule final_annotation_combination:
    input:
        f"data/annotations/{joined_cancers}/tesseract_conversion_success.txt"
    output:
        f"data/annotations/{joined_cancers}/annotations.csv"
    shell:
        f"python ./src/data_preparation/0_11_combine_annotations.py -c {cancer_arg} > {{output}}"

rule create_annotation_embeddings:
    input:
        f"data/annotations/{joined_cancers}/annotations.csv"
    output:
        f"results/embeddings/annotations/{joined_cancers}/embeddings.csv"
    shell:
        f"python ./src/data_preparation/0_12_create_annotation_embeddings.py -c {cancer_arg} > {{output}} 2>/dev/null"

rule create_h5:
    input:
        expand(
            "results/embeddings/annotations/{cancers}/embeddings.csv",
            cancers=joined_cancers
        ),
        "results/embeddings/mutation_embeddings.csv",
          rna_embeddings=expand(
            "results/embeddings/rna/{joined}/{cancer}_embeddings.csv",
            joined=joined_cancers,
            cancer=all_cancers
        )

    output:
        expand(
            f"results/embeddings/{{cancers}}.h5",
            cancers=joined_cancers
        )

    run:
        cancers = all_cancers
        shell(f"python ./src/data_preparation/0_14_create_h5.py -c {{cancers}}")


rule create_classifier_h5:
    input:
        expand(
            "results/embeddings/annotations/{cancers}/embeddings.csv",
            cancers=joined_cancers
        ),
        "results/embeddings/mutation_embeddings.csv",
          rna_embeddings=expand(
            "results/embeddings/rna/{joined}/{cancer}_embeddings.csv",
            joined=joined_cancers,
            cancer=all_cancers
        )

    output:
        expand(
            f"results/embeddings/{{cancers}}_classifier.h5",
            cancers=joined_cancers
        )

    run:
        cancers = all_cancers
        shell(f"python ./src/data_preparation/0_15_create_h5_classifier.py -c {{cancers}}")